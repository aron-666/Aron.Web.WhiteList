// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using intro.Models.WhiteLists;

namespace intro.Migrations.WhiteList
{
    [DbContext(typeof(WhiteListContext))]
    partial class WhiteListContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("intro.Models.WhiteLists.Whitelists", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint(20)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasColumnType("varchar(60)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("Name");

                    b.HasIndex("Route")
                        .IsUnique()
                        .HasName("Route");

                    b.ToTable("Whitelists");
                });

            modelBuilder.Entity("intro.Models.WhiteLists.WlContent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime");

                    b.Property<string>("Policy")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Remarks")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<long>("Wid")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("Wid", "Content")
                        .IsUnique()
                        .HasName("Wid");

                    b.ToTable("WL_Content");
                });

            modelBuilder.Entity("intro.Models.WhiteLists.WlContent", b =>
                {
                    b.HasOne("intro.Models.WhiteLists.Whitelists", "W")
                        .WithMany("Source")
                        .HasForeignKey("Wid")
                        .HasConstraintName("WL_Content_ibfk_1")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
